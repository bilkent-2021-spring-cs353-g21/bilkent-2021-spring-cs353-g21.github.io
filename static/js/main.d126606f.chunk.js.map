{"version":3,"sources":["ERDiagram.svg","proposal_data.js","MyTabs.js","App.js","reportWebVitals.js","index.js"],"names":["data","title","content","className","style","textAlign","maxWidth","margin","src","ERD","width","TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","MyTabs","classes","React","useState","setValue","Array","isArray","AppBar","position","Tabs","onChange","event","newValue","aria-label","variant","map","item","Tab","label","a11yProps","key","App","fontWeight","fontSize","color","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKAAe,G,MAAA,IAA0B,uC,OCG5BA,EAAO,CAChB,CACIC,MAAO,eACPC,QACI,sBAAKC,UAAU,OAAf,oYAOI,uBAPJ,IAOW,uBAPX,2NAYI,uBAZJ,IAYW,uBAZX,sRAkBI,uBAlBJ,IAkBW,uBACP,qBACIC,MAAO,CACHC,UAAW,SACXC,SAAU,QACVC,OAAQ,QAJhB,SAOI,qBAAKC,IAAKC,EAAKC,MAAM,eAKrC,CACIT,MAAO,WACPC,QAAS,CACL,CACID,MAAO,sBACPC,QACI,qBAAKC,UAAU,OAAf,wbAYR,CACIF,MAAO,8CACPC,QACI,sBAAKC,UAAU,OAAf,0jBAYI,uBAZJ,iQ,wDCpDpB,SAASQ,EAASC,GAAQ,IACdC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADd,YACwBJ,EADxB,8BAGrB,OACI,6CACIK,KAAK,WACLC,OAAQJ,IAAUC,EAClBI,GAAE,0BAAqBJ,GACvBK,kBAAA,qBAA+BL,IAC3BC,GALR,aAOKF,IAAUC,GAAS,8BAAMF,OAkBtC,IAAMQ,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,EACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,WAInC,SAASC,EAAT,GAA8B,IAAZ5B,EAAW,EAAXA,QACvB6B,EAAUV,IADwB,EAEdW,IAAMC,SAAS,GAFD,mBAEjCnB,EAFiC,KAE1BoB,EAF0B,KAQxC,OACI,mCACKC,MAAMC,QAAQlC,GACX,sBAAKC,UAAW4B,EAAQP,KAAxB,UACI,cAACa,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,cAACC,EAAA,EAAD,CACIzB,MAAOA,EACP0B,SAXH,SAACC,EAAOC,GACzBR,EAASQ,IAWWC,aAAW,OACXC,QAAQ,aAJZ,SAMK1C,EAAQ2C,KAAI,SAACC,EAAM/B,GAChB,OACI,wBAACgC,EAAA,EAAD,yBACIC,MAAOF,EAAK7C,OApCpD,SAAmBc,GACf,MAAO,CACHI,GAAG,cAAD,OAAgBJ,GAClB,gBAAgB,mBAAhB,OAAoCA,IAkCAkC,CAAUlC,IAFlB,IAGImC,IAAKnC,YAOxBb,EAAQ2C,KAAI,SAACC,EAAM/B,GAChB,OACI,cAACJ,EAAD,CAAUG,MAAOA,EAAOC,MAAOA,EAA/B,SACI,cAACe,EAAD,CAAQ5B,QAAS4C,EAAK5C,WADiBa,SAOvDb,IC/ED,SAASiD,IACpB,OACI,qCACI,sBAAKhD,UAAU,YAAYC,MAAO,CAAEC,UAAW,UAA/C,UACI,sBAAKD,MAAO,CAAEgD,WAAY,MAAOC,SAAU,QAA3C,4CAEI,uBAFJ,6BAKA,qBACIjD,MAAO,CACHgD,WAAY,MACZC,SAAU,OACVC,MAAO,QAJf,4FAUA,qBACIlD,MAAO,CACHgD,WAAY,MACZC,SAAU,OACVE,UAAW,QAJnB,+CASA,qBACInD,MAAO,CACHiD,SAAU,OACVC,MAAO,QAHf,iCASJ,cAACxB,EAAD,CAAQ5B,QAASF,OCzC7B,IAYewD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAChB,EAAD,MAEJiB,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.d126606f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ERDiagram.4db6244a.svg\";","import React from \"react\";\r\nimport ERD from \"./ERDiagram.svg\";\r\n\r\nexport const data = [\r\n    {\r\n        title: \"Introduction\",\r\n        content: (\r\n            <div className=\"text\">\r\n                This report explains our proposal for a food delivery web app\r\n                that uses database systems in its implementation. We will\r\n                discuss the app’s functionalities in general, its functional and\r\n                non-functional requirements, and the limitations of the project.\r\n                Finally, we will explain our design for the database, which will\r\n                be used as the backbone of the app with an E/R diagram.\r\n                <br /> <br />\r\n                The Overview chapter will include our plans for the project’s\r\n                general functionality, as we will explain how we will be\r\n                designing the software around our use of a DB system and how the\r\n                said database will be used.\r\n                <br /> <br />\r\n                Consecutively the following chapters will explain the\r\n                requirements and limitations of the project that we have\r\n                considered. We will then explain how we will lay our database\r\n                out with an extensive E/R diagram that will explain how the\r\n                software will use and store its user data.\r\n                <br /> <br />\r\n                <div\r\n                    style={{\r\n                        textAlign: \"center\",\r\n                        maxWidth: \"960px\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <img src={ERD} width=\"100%\" />\r\n                </div>\r\n            </div>\r\n        ),\r\n    },\r\n    {\r\n        title: \"Overview\",\r\n        content: [\r\n            {\r\n                title: \"Project Description\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        The project is a food order and delivery system in which\r\n                        any user will be able to create an account with which\r\n                        they will be able to issue an order for food delivery\r\n                        from any registered restaurants to an address of their\r\n                        choosing within a registered city. Following the order,\r\n                        the user will receive updates on the order they have put\r\n                        up. Finally, after delivery, the user can give feedback\r\n                        and a score on the delivery process.\r\n                    </div>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Use of a Database System within The Project\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        The database that will be implemented in this project\r\n                        will be used mostly to keep track of the customers and\r\n                        the restaurants from which they can order, as well as\r\n                        the orders themselves, including the item and the\r\n                        delivery-person themselves. Certain parts of the\r\n                        database are to be modified frequently as the users\r\n                        register accounts and rapidly order different meals from\r\n                        different registered restaurants. Alternatively, certain\r\n                        parts of the database will see very infrequent\r\n                        modification as the list of registered restaurants will\r\n                        not be modified every day.\r\n                        <br />\r\n                        For the information which will be displayed, some\r\n                        portions of the database will be visible to all users,\r\n                        such as the restaurants that will be displayed. However,\r\n                        an order, for example, will only be accessible to the\r\n                        user who has issued said order.\r\n                    </div>\r\n                ),\r\n            },\r\n        ],\r\n    },\r\n];\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <div>{children}</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        \"aria-controls\": `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport default function MyTabs({ content }) {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {Array.isArray(content) ? (\r\n                <div className={classes.root}>\r\n                    <AppBar position=\"static\">\r\n                        <Tabs\r\n                            value={value}\r\n                            onChange={handleChange}\r\n                            aria-label=\"tabs\"\r\n                            variant=\"scrollable\"\r\n                        >\r\n                            {content.map((item, index) => {\r\n                                return (\r\n                                    <Tab\r\n                                        label={item.title}\r\n                                        {...a11yProps(index)}\r\n                                        key={index}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </Tabs>\r\n                    </AppBar>\r\n\r\n                    {content.map((item, index) => {\r\n                        return (\r\n                            <TabPanel value={value} index={index} key={index}>\r\n                                <MyTabs content={item.content} />\r\n                            </TabPanel>\r\n                        );\r\n                    })}\r\n                </div>\r\n            ) : (\r\n                content\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nMyTabs.propTypes = {\r\n    content: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n};\r\n","import React from \"react\";\nimport { data } from \"./proposal_data\";\nimport MyTabs from \"./MyTabs\";\n\nexport default function App() {\n    return (\n        <>\n            <div className=\"text back\" style={{ textAlign: \"center\" }}>\n                <div style={{ fontWeight: \"700\", fontSize: \"30px\" }}>\n                    Bilkent University, Spring 2021\n                    <br />\n                    CS353: Database Systems\n                </div>\n                <div\n                    style={{\n                        fontWeight: \"700\",\n                        fontSize: \"18px\",\n                        color: \"gray\",\n                    }}\n                >\n                    Group 21: Ziya Mukhtarov, Alper Sarı, Pınar Yücel, Javid\n                    Baghirov\n                </div>\n                <div\n                    style={{\n                        fontWeight: \"700\",\n                        fontSize: \"30px\",\n                        marginTop: \"20px\",\n                    }}\n                >\n                    Food Ordering and Delivery System\n                </div>\n                <div\n                    style={{\n                        fontSize: \"25px\",\n                        color: \"gray\",\n                    }}\n                >\n                    Project Proposal\n                </div>\n            </div>\n            <MyTabs content={data} />\n        </>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}