{"version":3,"sources":["ERDiagram.svg","proposal_data.js","MyTabs.js","App.js","reportWebVitals.js","index.js"],"names":["data","title","content","className","style","textAlign","maxWidth","margin","src","ERD","width","TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","MyTabs","classes","React","useState","setValue","Array","isArray","AppBar","position","Tabs","onChange","event","newValue","aria-label","variant","map","item","Tab","label","a11yProps","key","App","fontWeight","fontSize","color","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec7bc5b3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ERDiagram.4db6244a.svg\";","import React from \"react\";\r\nimport ERD from \"./ERDiagram.svg\";\r\n\r\nexport const data = [\r\n    {\r\n        title: \"Introduction\",\r\n        content: (\r\n            <div className=\"text\">\r\n                This report elucidates our proposal for a food delivery web app\r\n                that uses database systems in its implementation. We will\r\n                discuss the app’s functional and non-functional requirements and\r\n                the limitations of the project. Finally, we will explain our\r\n                design for the database, which will be used as the backbone of\r\n                the app with an E/R diagram.\r\n                <br /> <br />\r\n                The Overview section includes our plans for the project’s\r\n                general functionality, as we will explain how we will be\r\n                designing the software around our use of a database system and\r\n                how the said database will be used.\r\n                <br /> <br />\r\n                The following sections explain the requirements and limitations\r\n                of the project that we have considered. We will then explain how\r\n                we will lay our database out with an extensive E/R diagram that\r\n                will explain how the software will use and store its user data.\r\n            </div>\r\n        ),\r\n    },\r\n    {\r\n        title: \"Overview\",\r\n        content: [\r\n            {\r\n                title: \"Project Description\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        The proposed web application is a food order and\r\n                        delivery system in which any user will be able to create\r\n                        an account and use this account to issue a food delivery\r\n                        order from any of the registered restaurants to be\r\n                        delivered to an address of their choosing within a\r\n                        registered city. Following the order, the user will\r\n                        receive updates on their order. Finally, after delivery,\r\n                        the user will be able to give feedback and rate the\r\n                        delivery process and order contents.\r\n                    </div>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Use of a Database System Within The Project\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        1. Why We Need to Use a Database <br />\r\n                        For a food delivery system to function well, it needs\r\n                        data. The most basic functionality of a food delivery\r\n                        system is to deliver food. In order to deliver food, we\r\n                        need to know which customer ordered the food, where and\r\n                        when, which items constitute in the order, what the\r\n                        status of the order is, and so on. Besides these basic\r\n                        functionalities, many other functionalities, such as\r\n                        allowing customers to store multiple addresses and\r\n                        phones with additional descriptions, a review system, a\r\n                        friends list, and chat, will be implemented. All of\r\n                        these functionalities constitute a huge amount of data,\r\n                        and this data needs to be read and modified by many\r\n                        users at the same time. The proposed web application\r\n                        also needs to be able to search for data and sort data\r\n                        when required and needs to do this rapidly with ease.\r\n                        Considering future updates, this data structure should\r\n                        be able to be modified easily. Algorithms that prevent\r\n                        data redundancy and inconsistency, that can easily\r\n                        access data, and that allows consistency constraints are\r\n                        required to maintain this huge amount of data.\r\n                        Furthermore, different types of users such as customers,\r\n                        the restaurant manager, and delivery guys should be\r\n                        given different types of access to the data stored;\r\n                        therefore, we need a system to which security\r\n                        constraints can be enforced easily. All of these\r\n                        considered, it is obviously most convenient to use a\r\n                        database system.\r\n                        <br /> <br />\r\n                        2. How We Will Be Using the Database <br />\r\n                        The database that will be implemented in this project\r\n                        will be used mostly to keep track of the customers and\r\n                        the restaurants from which they can order, as well as\r\n                        the orders themselves, including the items and the\r\n                        delivery guy. Certain parts of the database are to be\r\n                        modified frequently as the users register accounts and\r\n                        rapidly order different meals from different registered\r\n                        restaurants. Alternatively, certain parts of the\r\n                        database will see very infrequent modification as the\r\n                        list of registered restaurants will not be modified\r\n                        every day.\r\n                        <br /> <br />\r\n                        For the information which will be displayed, some\r\n                        portions of the database will be visible to all users,\r\n                        such as the restaurants that will be displayed. However,\r\n                        an order, for example, will only be accessible to the\r\n                        user who has issued said order.\r\n                    </div>\r\n                ),\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: \"Functional Requirements\",\r\n        content: [\r\n            {\r\n                title: \"General\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        Although there are three different types of users, these\r\n                        are some general things that apply to all of them.\r\n                        <br /> <br />\r\n                        1. Create an Account\r\n                        <br />\r\n                        All types of users in our system can create an account\r\n                        to be registered. For this, they need to provide their\r\n                        username, email, password, and date-of-birth.\r\n                        <br /> <br />\r\n                        2. Login with an Existing Account\r\n                        <br />\r\n                        If a user already has an account in the system, they\r\n                        will log in to the existing one by providing their email\r\n                        or username and password. Users can also opt for the\r\n                        system to remember their login information to avoid\r\n                        going over the same process each time.\r\n                    </div>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Customer Functionalities\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        1. Manage Account Details\r\n                        <br />\r\n                        When customers are logged in, they should be able to add\r\n                        or edit account details such as a delivery address,\r\n                        linked social media accounts, etc. Also, they can choose\r\n                        to add funds to their wallet in advance for an easier\r\n                        payment process while placing an order.\r\n                        <br /> <br />\r\n                        2. Address from Map\r\n                        <br />\r\n                        While choosing the delivery address, clients can also\r\n                        specify it using a map service as well as typing it\r\n                        manually.\r\n                        <br /> <br />\r\n                        3. Search\r\n                        <br />\r\n                        A client can search using either the name of the\r\n                        restaurant or the name of the item and see the available\r\n                        displayed options.\r\n                        <br /> <br />\r\n                        4. See and Manage the Basket\r\n                        <br />\r\n                        They can also see the current situation of the food\r\n                        basket and may choose to delete some items or add more\r\n                        items. Additionally, unless the customer clears the\r\n                        basket, they can see the contents of the same basket\r\n                        after logging out and logging in again or logging in\r\n                        using a different device.\r\n                        <br /> <br />\r\n                        5. Manage Order Details\r\n                        <br />\r\n                        Before an order is placed, if there is no specified\r\n                        address, the customers need to add one or edit an\r\n                        existing address. Also, here they can provide a payment\r\n                        method and make any additional requests to the\r\n                        restaurant.\r\n                        <br /> <br />\r\n                        6. Order Food\r\n                        <br />\r\n                        When there is an item in the basket, and necessary\r\n                        details are specified, the customer can place the order\r\n                        if there is enough balance for the specified payment\r\n                        method.\r\n                        <br /> <br />\r\n                        7. Rate an Order\r\n                        <br />\r\n                        After the delivery is done, customers may choose to rate\r\n                        their order. Here, they can review both the restaurant\r\n                        and the deliverer in terms of the delivery process.\r\n                        <br /> <br />\r\n                        8. Obtain Scores\r\n                        <br />\r\n                        In this food ordering and delivery software, a customer\r\n                        can collect some points/scores in an achievement-based\r\n                        system.\r\n                        <br /> <br />\r\n                        9. Interact with Social Media\r\n                        <br />\r\n                        The client can link some of their social media accounts\r\n                        and share their order via media. By doing this, they can\r\n                        also obtain scores if there is a related achievement\r\n                        goal.\r\n                        <br /> <br />\r\n                        10. Chat/Interact with Friends\r\n                        <br />\r\n                        Also, customers can interact with those they have added\r\n                        as friends. They can see each other’s order history and\r\n                        talk to them via chat.\r\n                    </div>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Restaurant and Manager Functionalities\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        1. Restaurant Management\r\n                        <br />\r\n                        Each restaurant is managed by users who are mainly\r\n                        responsible for the arrangement of schedules and\r\n                        discounts.\r\n                        <br /> <br />\r\n                        2. Discounts\r\n                        <br />\r\n                        In a restaurant, discounts can also be offered for the\r\n                        clients that will be applied automatically if the order\r\n                        price is above the specified limit.\r\n                        <br /> <br />\r\n                        3. Rating\r\n                        <br />\r\n                        As customers rate and give feedback to some restaurants,\r\n                        they will gain some scores and ratings that the clients\r\n                        can see, and these places can be ordered and displayed\r\n                        accordingly.\r\n                        <br /> <br />\r\n                        4. Schedule\r\n                        <br />\r\n                        Also, a manager should create and edit a schedule for a\r\n                        restaurant that will display the working day, hours, and\r\n                        breaks.\r\n                    </div>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Delivery Guy Functionalities\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        1. Receive a Request\r\n                        <br />\r\n                        When a customer orders food, a delivery person who is\r\n                        available for that restaurant at the moment will be\r\n                        notified of the request and will receive address and\r\n                        additional requests.\r\n                        <br /> <br />\r\n                        2. Mark as Delivered\r\n                        <br />\r\n                        After a successful delivery, the deliverer should\r\n                        complete the process by marking the food as delivered.\r\n                    </div>\r\n                ),\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: \"Non-functional Requirements\",\r\n        content: [\r\n            {\r\n                title: \"Usability\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        Any English-speaking person should be able to proceed\r\n                        with and place an order successfully.\r\n                        <br /> <br />\r\n                        The account management tab should be accessible within\r\n                        two clicks.\r\n                        <br /> <br />\r\n                        The website should be usable in any modern internet\r\n                        browser except for Internet Explorer.\r\n                    </div>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Reliability\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        If a problem occurs during the order or payment\r\n                        placement, the current action should be rejected, and\r\n                        the client should be notified.\r\n                        <br /> <br />\r\n                        Since accounts are held in a database, their security\r\n                        must be maintained to prevent the accounts from being\r\n                        lost or stolen.\r\n                    </div>\r\n                ),\r\n            },\r\n            {\r\n                title: \"Performance\",\r\n                content: (\r\n                    <div className=\"text\">\r\n                        The website should be available for both desktop and\r\n                        mobile platforms.\r\n                    </div>\r\n                ),\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: \"Limitations\",\r\n        content: (\r\n            <div className=\"text\">\r\n                A client can only order food that is in his/her basket.\r\n                <br /> <br />\r\n                A customer needs to be logged in to be able to order from a\r\n                restaurant.\r\n                <br /> <br />\r\n                An order can only be reviewed by the customer who made it.\r\n                <br /> <br />\r\n                A client can order from only one restaurant at a time.\r\n                <br /> <br />\r\n                An order can only be related to one customer account.{\" \"}\r\n            </div>\r\n        ),\r\n    },\r\n    {\r\n        title: \"Conceptual Design\",\r\n        content: (\r\n            <>\r\n                <div\r\n                    style={{\r\n                        textAlign: \"center\",\r\n                        maxWidth: \"960px\",\r\n                        margin: \"auto\",\r\n                    }}\r\n                >\r\n                    <img src={ERD} width=\"100%\" />\r\n                </div>\r\n                <div className=\"text\">\r\n                    Figure shows the conceptual design of this system. All\r\n                    entities and relationships have self-explanatory names. Some\r\n                    relations can be considered to be redundant, although we\r\n                    believe that their existence can be justified. Our\r\n                    justification for some of them is as follows.\r\n                    <br /> <br />\r\n                    One of such relationships is the from relation between order\r\n                    and restaurant entities. It contains information about the\r\n                    restaurant that an order was ordered from. The information\r\n                    it has is redundant since this information can be obtained\r\n                    using first the contains relation between the basket entity\r\n                    and the order entity to find the basket of the order; then,\r\n                    using the contains relation between the basket and the item\r\n                    entity; and then using the sells relation to find the\r\n                    restaurant. However, this is a costly process. As an\r\n                    example, we may want to display all the comments for a\r\n                    particular restaurant. Storing the from relation will allow\r\n                    us to acquire the related orders to a specific restaurant\r\n                    quickly.\r\n                </div>\r\n            </>\r\n        ),\r\n    },\r\n];\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <div>{children}</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        \"aria-controls\": `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nexport default function MyTabs({ content }) {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {Array.isArray(content) ? (\r\n                <div className={classes.root}>\r\n                    <AppBar position=\"static\">\r\n                        <Tabs\r\n                            value={value}\r\n                            onChange={handleChange}\r\n                            aria-label=\"tabs\"\r\n                            variant=\"scrollable\"\r\n                        >\r\n                            {content.map((item, index) => {\r\n                                return (\r\n                                    <Tab\r\n                                        label={item.title}\r\n                                        {...a11yProps(index)}\r\n                                        key={index}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </Tabs>\r\n                    </AppBar>\r\n\r\n                    {content.map((item, index) => {\r\n                        return (\r\n                            <TabPanel value={value} index={index} key={index}>\r\n                                <MyTabs content={item.content} />\r\n                            </TabPanel>\r\n                        );\r\n                    })}\r\n                </div>\r\n            ) : (\r\n                content\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nMyTabs.propTypes = {\r\n    content: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n};\r\n","import React from \"react\";\nimport { data } from \"./proposal_data\";\nimport MyTabs from \"./MyTabs\";\n\nexport default function App() {\n    return (\n        <>\n            <div className=\"text back\" style={{ textAlign: \"center\" }}>\n                <div style={{ fontWeight: \"700\", fontSize: \"30px\" }}>\n                    Bilkent University, Spring 2021\n                    <br />\n                    CS353: Database Systems\n                </div>\n                <div\n                    style={{\n                        fontWeight: \"700\",\n                        fontSize: \"18px\",\n                        color: \"gray\",\n                    }}\n                >\n                    Group 21: Ziya Mukhtarov, Alper Sarı, Pınar Yücel, Javid\n                    Baghirov\n                </div>\n                <div\n                    style={{\n                        fontWeight: \"700\",\n                        fontSize: \"30px\",\n                        marginTop: \"20px\",\n                    }}\n                >\n                    Food Ordering and Delivery System\n                </div>\n                <div\n                    style={{\n                        fontSize: \"25px\",\n                        color: \"gray\",\n                    }}\n                >\n                    Project Proposal\n                </div>\n            </div>\n            <MyTabs content={data} />\n        </>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}